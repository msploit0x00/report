{
 "add_total_row": 0,
 "columns": [],
 "creation": "2024-05-15 12:21:57.683549",
 "disable_prepared_report": 0,
 "disabled": 0,
 "docstatus": 0,
 "doctype": "Report",
 "filters": [],
 "idx": 0,
 "is_standard": "Yes",
 "javascript": "frappe.query_reports[`Exports Export Volume Report`] = {\n    \"filters\": [\n        {\n            \"fieldname\": \"tax_id\",\n            \"label\": \"Please write Tax ID\",\n            \"fieldtype\": \"Data\",\n            \"width\": \"350px\"\n        }\n    ],\n    \"onload\": function(report) {\n        // Function to change text color based on the value of 'is_member'\n        function applyColorToIsMember() {\n            const rows = report.wrapper.querySelectorAll(\".dt-scrollable tbody tr\");\n            \n            rows.forEach(row => {\n                const isMemberCell = row.querySelector(\".is_member\");\n                \n                if (isMemberCell) {\n                    const isMemberValue = isMemberCell.textContent.trim();\n                    \n                    if (isMemberValue === \"Yes\") {\n                        isMemberCell.style.color = \"green\";\n                    } else if (isMemberValue === \"No\") {\n                        isMemberCell.style.color = \"red\";\n                    }\n                }\n            });\n        }\n        \n        // Apply color to 'is_member' on initial load\n        applyColorToIsMember();\n        \n        // Function to handle validation of tax_id filter\n        function validateTaxId(taxId) {\n            // Your validation logic here\n            // For example, you can check if the tax ID exists or is correct\n            // You can make an AJAX request to the server to check the tax ID\n            \n            // For demonstration purposes, let's assume tax ID must be a 10-digit number\n            const taxIdRegex = /^\\d{10}$/;\n            \n            return taxIdRegex.test(taxId);\n        }\n        \n        // Event listener to validate tax_id filter on change\n        report.page.wrapper.addEventListener(\"change\", function(event) {\n            if (event.target.matches(\"[data-filter='tax_id']\")) {\n                const taxIdInput = event.target;\n                const taxId = taxIdInput.value.trim();\n                \n                if (!validateTaxId(taxId)) {\n                    frappe.msgprint({\n                        title: __(\"Invalid Tax ID\"),\n                        message: __(\"Please enter a valid 10-digit Tax ID.\"),\n                        indicator: \"red\"\n                    });\n                    \n                    // Clear the invalid value from the input\n                    taxIdInput.value = \"\";\n                }\n            }\n        });\n        \n        // Optionally, you can reapply the color after any user actions or updates to the report\n        report.page.add_inner_button(\"Refresh Colors\", function() {\n            applyColorToIsMember();\n        });\n    }\n};\n",
 "letter_head": "header",
 "modified": "2024-05-15 13:21:02.172830",
 "modified_by": "Administrator",
 "module": "Report",
 "name": "Export Test",
 "owner": "Administrator",
 "prepared_report": 0,
 "query": "# Define columns for the report\r\ncolumns = [\r\n    _(\"Season\") + \"::150\",\r\n    _(\"Customer Name\") + \"::170\",\r\n    _(\"Customer Group\") + \"::170\",\r\n    _(\"Tax Id\") + \"::120\",\r\n    _(\"Company Code\") + \"::120\",\r\n    _(\"New Column Based on Group\") + \"::150\",\r\n    _(\"Total Amount in EGP\") + \"::150\"\r\n]\r\n\r\n# Get values from filters or set them to None\r\ntax_id = filters.get(\"tax_id\")\r\n\r\n# SQL Query\r\nmysql = \"\"\"\r\n    SELECT\r\n        vme.season AS `Season`,\r\n        c.customer_name AS `Customer Name`,\r\n        c.customer_group AS `Customer Group`,\r\n        c.tax_id AS `Tax Id`,\r\n        c.custom_company_code AS `Company Code`,\r\n        CASE\r\n            WHEN c.customer_group = '\u062d\u062c\u0645 \u0635\u0627\u062f\u0631\u0627\u062a \u0627\u0642\u0644 \u0645\u0646 \u0645\u0644\u064a\u0648\u0646 \u062c\u0646\u064a\u0647' THEN 1000\r\n            WHEN c.customer_group = '\u062d\u062c\u0645 \u0635\u0627\u062f\u0631\u0627\u062a \u0627\u0643\u062b\u0631 \u0645\u0646 \u0645\u0644\u064a\u0648\u0646 \u0648\u0627\u0642\u0644 \u0645\u0646 \u0639\u0634\u0631\u0629 \u0645\u0644\u064a\u0648\u0646 \u062c\u0646\u064a\u0647' THEN 1300\r\n            WHEN c.customer_group = '\u062d\u062c\u0645 \u0635\u0627\u062f\u0631\u0627\u062a \u0627\u0643\u062b\u0631 \u0645\u0646 \u0639\u0634\u0631\u0629 \u0648\u0627\u0642\u0644 \u0645\u0646 \u0639\u0634\u0631\u064a\u0646 \u0645\u0644\u064a\u0648\u0646 \u062c\u0646\u064a\u0647' THEN 2000\r\n            WHEN c.customer_group = '\u062d\u062c\u0645 \u0635\u0627\u062f\u0631\u0627\u062a \u0627\u0643\u062b\u0631 \u0645\u0646 \u0639\u0634\u0631\u064a\u0646 \u0648\u0627\u0642\u0644 \u0645\u0646 \u0645\u0627\u0626\u0629 \u0645\u0644\u064a\u0648\u0646 \u062c\u0646\u064a\u0647' THEN 2500\r\n            WHEN c.customer_group = '\u062d\u062c\u0645 \u0635\u0627\u062f\u0631\u0627\u062a \u0627\u0639\u0644\u064a \u0645\u0646 100 \u0645\u0644\u064a\u0648\u0646 \u062c\u0646\u064a\u0647' THEN 3000\r\n            ELSE 'DefaultValue'\r\n        END AS `New Column Based on Group`,\r\n        SUM(vme.total_amount_in_egp) AS `Total Amount in EGP`\r\n    FROM\r\n        `tabVolume Of Member Exports` AS vme\r\n    JOIN\r\n        `tabCustomer` AS c ON vme.tax__number = c.tax_id\r\n    WHERE\r\n        (%(tax_id)s IS NULL OR c.tax_id LIKE %(tax_id)s)\r\n\"\"\"\r\n\r\n# Execute the SQL query using the Frappe framework's database API\r\nmydata = frappe.db.sql(\r\n    mysql,\r\n    {\r\n        \"tax_id\": f\"%{tax_id}%\" if tax_id else None,\r\n    },\r\n    as_dict=True,\r\n)\r\n\r\n# Combine columns and fetched data\r\ndata = columns, mydata\r\n",
 "ref_doctype": "Volume Of Member Exports",
 "report_name": "Export Test",
 "report_script": "# Define columns for the report in the desired order\n\ncolumns = [\n    _(\"Tax ID\") + \"::150\" ,\n    _(\"Member Name\") + \"::170\",\n    _(\"CEO name\") + \"::150\",\n    _(\"Membershipe code\") + \"::100\",\n    _(\"Season\") + \"::100\",\n    _(\"Season  name\") + \"::100\",\n    _(\"Total Amount in EGP: Currency\") + \"::150\",\n    _(\"Member Category\") + \"::200\",\n    _(\"Membership Price: Currency\") + \"::150\",\n    _(\"Is member\") + \"::100\",  # New column for membership check\n]\n\n# Get tax_id from filters (if available)\ntax_id = filters.get(\"tax_id\")\nmessage = \"Your Exports Details in the Last 3 Seasons\"\n\n# Check if tax_id is provided; if not, return an empty result\nif not tax_id:\n    data = columns, [], message\nelse:\n    # SQL query to fetch data for the report\n    mysql = \"\"\"\n    SELECT\n        `tabVolume Of Member Exports`.`tax__number` AS `tax_id`,\n        `tabCustomer`.`customer_name` AS `member_name`,\n        `tabCustomer`.`custom_name_of_the_cioowner_of_the_company` AS `ceo_name`,\n        `tabCustomer`.`custom_company_code` AS `membershipe_code`,\n        `tabVolume Of Member Exports`.`season` AS `season`,\n        `tabVolume Of Member Exports`.`season__name` AS `season__name`,\n        SUM(`tabVolume Of Member Exports`.`total_amount_in_egp`) AS `total_amount_in_egp`,\n        CASE\n            WHEN SUM(`tabVolume Of Member Exports`.`total_amount_in_egp`) BETWEEN 0 AND 1000000 THEN 'Less than 1 million EGP'\n            WHEN SUM(`tabVolume Of Member Exports`.`total_amount_in_egp`) BETWEEN 1000001 AND 10000000 THEN 'Between 1M and 10M EGP'\n            WHEN SUM(`tabVolume Of Member Exports`.`total_amount_in_egp`) BETWEEN 10000001 AND 20000000 THEN 'Between 10M and 20M EGP'\n            WHEN SUM(`tabVolume Of Member Exports`.`total_amount_in_egp`) BETWEEN 20000001 AND 100000000 THEN 'Between 20M and 100M EGP'\n            ELSE 'More than 100 million EGP'\n        END AS `member_category`,\n        CASE\n            WHEN SUM(`tabVolume Of Member Exports`.`total_amount_in_egp`) BETWEEN 0 AND 1000000 THEN '1000'\n            WHEN SUM(`tabVolume Of Member Exports`.`total_amount_in_egp`) BETWEEN 1000001 AND 10000000 THEN '1300'\n            WHEN SUM(`tabVolume Of Member Exports`.`total_amount_in_egp`) BETWEEN 10000001 AND 20000000 THEN '2000'\n            WHEN SUM(`tabVolume Of Member Exports`.`total_amount_in_egp`) BETWEEN 20000001 AND 100000000 THEN '2500'\n            ELSE '3000'\n        END AS `membership_price`,\n        CASE\n            WHEN EXISTS (\n                SELECT 1 FROM `tabVolume Of Member Exports`\n                WHERE `tabVolume Of Member Exports`.`tax__number` = `tabCustomer`.`tax_id`\n            ) THEN 'Yes'\n            ELSE 'No'\n        END AS `is_member`\n    FROM\n        `tabVolume Of Member Exports`\n    LEFT JOIN\n        `tabCustomer` ON `tabVolume Of Member Exports`.`tax__number` = `tabCustomer`.`tax_id`\n    WHERE\n        (%(tax_id)s IS NULL OR `tabVolume Of Member Exports`.`tax__number` LIKE %(tax_id)s)\n        AND `tabVolume Of Member Exports`.`season` IN (\n            SELECT `name` FROM `tabExport Season`\n            WHERE YEAR(`start_date`) BETWEEN 2021 AND 2023\n            OR YEAR(`end_date`) BETWEEN 2021 AND 2023\n        )\n    GROUP BY\n        `tabVolume Of Member Exports`.`tax__number`,\n        `tabCustomer`.`customer_name`,\n        `tabVolume Of Member Exports`.`name1`,\n        `tabCustomer`.`custom_company_code`,\n        `tabVolume Of Member Exports`.`season`,\n        `tabVolume Of Member Exports`.`season__name`\n    ORDER BY\n        `tabVolume Of Member Exports`.`season` DESC;\n    \"\"\"\n\n    # Execute SQL query to fetch data\n    mydata = frappe.db.sql(\n        mysql,\n        {\n            \"tax_id\": f\"%{tax_id}%\" if tax_id else None,\n        },\n        as_dict=True,\n    )\n\n    if not mydata:\n        message = \"No data found for the provided Tax ID. Please verify the Tax ID and try again.\"\n        data = columns, [], message, None, None\n    else:\n        # Sort mydata based on the 'season' column in descending order\n        mydata_sorted = sorted(mydata, key=lambda x: x['season'], reverse=True)\n\n        # Function to apply color based on customer_group value\n        def apply_color_to_is_member(value):\n            if value == 'No':\n                return '<span style=\"color: red;text-align: center; vertical-align: middle;\">No</span>'\n            elif value == 'Yes':\n                return '<span style=\"color: green;text-align: center; vertical-align: middle;\">Yes</span>'\n            else:\n                return value  # Return the value unchanged if no condition is met\n\n        # Apply color conditionally to the 'is_member' column in mydata\n        for row in mydata:\n            row['is_member'] = apply_color_to_is_member(row['is_member'])\n\n        # Extract values for report_summary from the first row of mydata_sorted (i.e., greatest season)\n        if mydata_sorted:\n            season_name_value = mydata_sorted[0]['season__name']\n            amount_in_egp_value = mydata_sorted[0]['total_amount_in_egp']\n            customer_group_value = mydata_sorted[0]['member_category']\n            price_value = mydata_sorted[0]['membership_price']\n        else:\n            season_name_value, amount_in_egp_value, customer_group_value, price_value = 'N/A', 'N/A', 'N/A', 'N/A'\n\n        # Creating report_summary based on extracted values\n        report_summary = [\n            {\"value\": season_name_value, \"label\": \"Season Name\", \"datatype\": \"Data\"},\n            {\"value\": str(amount_in_egp_value), \"label\": \"Amount in EGP\", \"datatype\": \"Currency\"},\n            {\"value\": customer_group_value, \"label\": \"Member Category\", \"datatype\": \"Data\"},\n            {\"value\": price_value, \"label\": \"Membership Price\", \"datatype\": \"Currency\"}\n        ]\n\n        # Combine columns and fetched data for the report along with report_summary\n        data = columns, mydata, message, None, report_summary\n",
 "report_type": "Script Report",
 "roles": [
  {
   "role": "System Manager"
  },
  {
   "role": "Accounts Manager"
  }
 ]
}